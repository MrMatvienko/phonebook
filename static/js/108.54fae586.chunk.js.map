{"version":3,"file":"static/js/108.54fae586.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","store/Contacts/selectors.js","store/Filter/selectors.js","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  padding-top: 50px;\n`;\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  padding: 40px;\n  background-color: rgba(0, 0, 0, 0.2);\n  border: 1px solid #f08080;\n  border-radius: 10px;\n  margin: 0 auto;\n`;\n\nexport const StyledInput = styled.input`\n  margin-bottom: 5px;\n  border-radius: 10px;\n  height: 20px;\n  padding: 8px 12px;\n  border: none;\n  font: inherit;\n  cursor: pointer;\n  &::placeholder {\n    font-size: 12px;\n  }\n`;\n\nexport const StyledBtn = styled.button`\n  padding: 8px 12px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 10px;\n  border: 1px solid #f08080;\n  color: #f08080;\n  font-size: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: background-color 500ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    background-color: #b9bcd3;\n  }\n`;\n","import { nanoid } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport {\n  StyledBtn,\n  StyledForm,\n  StyledInput,\n  Wrapper,\n} from './ContactForm.styled';\nimport { addContacts } from 'store/API';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const newObj = {\n      id: nanoid(),\n      name: e.target.elements.name.value,\n      number: e.target.elements.number.value,\n    };\n    dispatch(addContacts(newObj));\n\n    e.target.reset();\n  };\n\n  return (\n    <Wrapper>\n      <StyledForm onSubmit={handleSubmit}>\n        <StyledInput type=\"text\" name=\"name\" placeholder=\"Name\" required />\n        <StyledInput type=\"tel\" name=\"number\" placeholder=\"Number\" required />\n        <StyledBtn type=\"submit\">Add Contacts</StyledBtn>\n      </StyledForm>\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components';\n\n// export const Title = styled.h2`\n//   text-shadow: rgb(255, 204, 0) 1px 0px 10px;\n//   font-size: 28px;\n// `;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const SearchInput = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 30px;\n`;\n\nexport const Text = styled.p`\n  font-size: 24px;\n`;\n\nexport const Item = styled('li')`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n`;\n\nexport const BtnDelete = styled('button')`\n  padding: 8px 12px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 10px;\n  border: 1px solid #f08080;\n  color: #f08080;\n  font-size: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.5s ease,\n    background-color 500ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n    background-color: #b9bcd3;\n    transform: scale(1.15);\n  }\n`;\n\nexport const StylePar = styled('p')`\n  width: 240px;\n  height: 40px;\n  text-align: center;\n  align-items: center;\n  border-radius: 10px;\n  border: 1px solid #f08080;\n  color: #f08080;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: auto;\n  background-color: white;\n`;\n\nexport const StyledUl = styled.ul`\n  max-width: 600px;\n  margin-top: 20px;\n`;\n\nexport const AddText = styled.p`\n  font-family: inherit;\n  font-size: 24px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from 'store/Filter/selectors';\n\n// Імпортуємо необхідні функції для створення селектора та вибору фільтру зі стану.\n\nexport const selectLoading = state => state.contacts.isLoading;\n// Селектор selectLoading вибирає прапор isLoading зі стану contacts.\n\nexport const selectError = state => state.contacts.error;\n// Селектор selectError вибирає об'єкт помилки (якщо він є) зі стану contacts.\n\nexport const selectContacts = state => state.contacts.items;\n// Селектор selectContacts вибирає масив контактів зі стану contacts.\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n// Створюємо складний селектор selectVisibleContacts, який залежить від selectContacts та selectFilter.\n// Використовуючи createSelectors, ми передаємо попередньо створені селектори та функцію, яка обчислює відфільтрований масив контактів.\n// В результаті, selectVisibleContacts повертає масив контактів, які відповідають заданому фільтру.\n// Фільтрація виконується шляхом порівняння імен контактів зі значенням фільтру, без урахування регістру.\n","export const selectFilter = state => state.filter;\n","import styled from 'styled-components';\n\nexport const SearchInput = styled.input`\n  width: 300px;\n  margin-bottom: 5px;\n  border-radius: 10px;\n  padding-left: 20px;\n  height: 20px;\n  color: #171718;\n  padding: 8px 12px;\n  border: none;\n  font: inherit;\n  cursor: pointer;\n  &::placeholder {\n    font-size: 12px;\n    color: black;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'store/Filter/filterSlice';\nimport { SearchInput } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter);\n\n  const showFilteredContacts = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n  return (\n    <SearchInput\n      type=\"text\"\n      name=\"filter\"\n      placeholder=\"Search\"\n      value={filter}\n      onChange={showFilteredContacts}\n    />\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  AddText,\n  BtnDelete,\n  Item,\n  SearchInput,\n  StylePar,\n  StyledUl,\n  Text,\n  Wrapper,\n} from './ContactList.styled';\nimport { deleteContacts } from 'store/API';\nimport { selectVisibleContacts } from 'store/Contacts/selectors';\nimport { Filter } from 'components/Filter/Filter';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectVisibleContacts);\n  return (\n    <Wrapper>\n      <SearchInput>\n        <Text>Find contacts by name</Text>\n        <Filter />\n      </SearchInput>\n\n      {contacts.length === 0 ? (\n        <AddText>Add contacts please...</AddText>\n      ) : (\n        <StyledUl>\n          {contacts.map(contact => (\n            <Item key={contact.id}>\n              <StylePar>{contact.name}</StylePar>\n              <StylePar>{contact.number}</StylePar>\n              <BtnDelete onClick={() => dispatch(deleteContacts(contact.id))}>\n                Delete\n              </BtnDelete>\n            </Item>\n          ))}\n        </StyledUl>\n      )}\n    </Wrapper>\n  );\n};\n","import { styled } from 'styled-components';\nimport img from '../../components/assets/phonebooks.jpeg';\nexport const Wraper = styled.div`\n  display: flex;\n  justify-content: space-around;\n  height: 100vh;\n  padding: 80px 200px;\n  background: linear-gradient(rgba(46, 47, 66, 0.1), rgba(48, 47, 80, 0.3)),\n    url(${img}) 50% no-repeat #ffff;\n`;\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Loader } from 'components/Loader/Loader';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'store/API';\nimport { selectIsLoading } from 'store/auth/selectors';\nimport { Wraper } from './Contacts.styled';\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts()); // Виконуємо запит для отримання контактів з сервера\n  }, [dispatch]);\n\n  return (\n    <Wraper>\n      <ContactForm /> {/* Компонент форми для додавання контакту */}\n      <div>{isLoading && <Loader />}</div>{' '}\n      {/* Відображення повідомлення про виконання запиту */}\n      <ContactList /> {/* Компонент для відображення списку контактів */}\n    </Wraper>\n  );\n}\n"],"names":["Wrapper","styled","_templateObject","_taggedTemplateLiteral","StyledForm","_templateObject2","StyledInput","_templateObject3","StyledBtn","_templateObject4","ContactForm","dispatch","useDispatch","_jsx","children","_jsxs","onSubmit","e","preventDefault","newObj","id","nanoid","name","target","elements","value","number","addContacts","reset","type","placeholder","required","SearchInput","Text","Item","BtnDelete","_templateObject5","StylePar","_templateObject6","StyledUl","_templateObject7","AddText","_templateObject8","selectVisibleContacts","createSelector","state","contacts","items","filter","contact","toLowerCase","includes","Filter","useSelector","onChange","filterContacts","ContactList","length","map","onClick","deleteContacts","Wraper","img","Tasks","isLoading","selectIsLoading","useEffect","fetchContacts","Loader"],"sourceRoot":""}